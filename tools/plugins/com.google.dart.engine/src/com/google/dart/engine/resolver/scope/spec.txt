Notes from The Dart Programming Language Specification - 7/27/2012

Scopes

A namespace is a mapping of identifiers to declarations. Let NS be a namespace. We say that a name
n is in NS if n is a key of NS. We say a declaration d is in NS if a key of NS maps to d.

A scope S0 induces a namespace NS0 that is the mapping that maps the simple name of each variable,
type or function declaration d declared in S0 to d. Labels are not included in the induced
namespace of a scope; instead they have their own dedicated namespace.

[It is therefore impossible, e.g., to define a class that declares a method and a field with the
same name in Dart. Similarly one cannot declare a top level function with the same name as a top
level variable or class.]

It is a compile-time error if there is more than one entity, other than a setter and a getter, with
the same name declared in the same scope, with the exception of the operator -, where both a unary
and a binary version may coexist.

Dart is lexically scoped. Scopes may nest. A name or declaration d is available in scope S if d is
in the namespace induced by S or if d is available in the lexically enclosing scope of S. We say
that a name or declaration d is in scope if d is available in the current scope. 

If a declaration d named n is in the namespace induced by a scope S, then d hides any declaration
named n that is available in the lexically enclosing scope of S. 

Names may be introduced into a scope by declarations within the scope or by other mechanisms such as
imports or inheritance.

Formal Parameters

The formal parameter list of a function introduces a new scope known as the function`s formal
parameter scope. The formal parameter scope of a function f is enclosed in the scope where f is
declared. 

The body of a function introduces a new scope known as the function`s body scope. The body of a
function f is enclosed in the scope introduced by formal parameter scope of f.

Generative Constructors

Using an initializing formal this.id in a formal parameter list does not introduce a formal
parameter name into the scope of the constructor. However, the initializing formal does effect the
type of the constructor function exactly as if a formal parameter named id of the same type were
introduced in the same position.

Redirecting Constructors

After all the initializers have completed, the body of k is executed in a scope where this is bound
to i.

[This process ensures that no uninitialized final field is ever seen by code. Note that this is not
in scope on the right hand side of an initializer so no instance method can execute during
initialization: an instance method cannot be directly invoked, nor can this be passed into any other
code being invoked in the initializer. ]

Superclasses

It is a compile-time error if the extends clause of a class C includes a type expression that does
not denote a class available in the lexical scope of C.

[The type parameters of a generic class are available in the lexical scope of the superclass clause,
potentially shadowing classes in the surrounding scope. The following code is therefore illegal and
should cause a compile-time error:

class T{}

class G<T> extends T {} // Compilation error: Attempt to subclass a type variable]

Superinterfaces

It is a compile-time error if the implements clause of a class C includes a type expression that
does not denote a class available in the lexical scope of C.

Generics

The type parameters of a generic declaration G are in scope in the bounds of all of the type
parameters of G. The type parameters of a generic class declaration G are also in scope in the
extends and implements clauses of G (if these exist) and in the non-static members of G.

Instance Creation

It is a compile-time error if any of the type arguments to a constructor of a generic type invoked
by a new expression or a constant object expression do not denote types in the enclosing lexical
scope.

Getter Invocation

It is a static warning if there is no class C in the enclosing lexical scope of i, or if C does not
declare, implicitly or explicitly, a getter named m.

Assignment

It is a static warning if there is no class C in the enclosing lexical scope of the assignment, or
if C does not declare, implicitly or explicitly, a setter v=.

Switch

A case clause introduces a new scope, nested in the lexically surrounding scope. The scope of a case
clause ends immediately after the case clause’s statement.

Try

Variables p1 of static type T, and p2 of static type StackTrace are implicitly declared, with a
scope comprising s. The variable p1 is bound to the current exception, and p2 is bound to the
current stack trace. Next, the statement s is executed in the dynamic scope of the exception handler
defined by the finally clause of t. Then, the current exception and active stack trace both become
undefined.

The statement s1 is executed in the dynamic scope of the exception handler defined by the try
statement. Then, the finally clause is executed.

Labels

The scope of a label that labels a statement s is s. The scope of a label that labels a case clause
of a switch statement s is s.

Libraries and Scripts

The scope of a library L consists of the names introduced of all top level declarations declared in
L, and the names added by L's imports.

Imports

Every library L has an import namespace I that maps names to declarations given in other libraries.
Any name N defined by I is in scope in L, unless either:
* a declaration with the name N exists in L, OR
* L contains an import of the form import … as N.

Then, for each entry mapping key k to declaration d in NS, d is made available in the top level
scope of L under the name k unless either:
* a declaration with the name k exists in L, OR
* a prefix clause of the form as k is used in L.